// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // A register: 0xxx xxxx xxxx xxxx
    Not(in=instruction[15], out=to-a);
    Mux16(a=alu-out, b[0..14]=instruction[0..14], b[15]=false, sel=to-a, out=a-in);
    Or(a=to-a, b=instruction[5], out=a-load);
    ARegister(in=a-in, load=a-load, out=a-out, out[0..14]=addressM); // addressM

    // D Register
    And(a=instruction[4], b=instruction[15], out=d-load);
    DRegister(in=alu-out, load=d-load, out=alu-in-x);

    // ALU
    Mux16(a=a-out, b=inM, sel=instruction[12], out=alu-in-y);
    ALU(x=alu-in-x, zx=instruction[11], nx=instruction[10], y=alu-in-y, zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=alu-out, out=outM, zr=zr, ng=ng);

    
    // check conditions
    Jmp(in=instruction, ng=ng, zr=zr, load=pc-load, inc=pc-inc);
    // PC
    PC(in=a-out, load=pc-load, inc=pc-inc, reset=reset, out[0..14]=pc);

    // writeM
    And(a=instruction[3], b=instruction[15], out=writeM);

}