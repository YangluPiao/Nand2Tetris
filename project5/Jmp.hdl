// null 0 0 0: no jump
// JGT  0 0 1: if out > 0 : jump
// JEQ  0 1 0: if out == 0: jump
// JGE  0 1 1: if out >= 0: jump
// JLT  1 0 0: if out < 0:  jump
// JNE  1 0 1: if out != 0: jump
// JLE  1 1 0: if out <- 0: jump
// JMP  1 1 1: jump
CHIP Jmp {
     IN  in[16], zr, ng;
     OUT load, inc;

     PARTS:
     Not(in=ng, out=notng);
     Not(in=zr, out=notzr);
     And(a=notng, b=notzr, out=pos);
     And(a=in[0], b=pos, out=checkpositive);
     And(a=in[1], b=zr, out=checkzero);
     And(a=in[2], b=ng, out=checknegative);
     Or(a=checkpositive, b=checkzero, out=positiveorzero);
     Or(a=positiveorzero, b=checknegative, out=preload);
     And(a=in[15], b=preload, out=notinc, out=load);
     Not(in=notinc, out=inc);
     /** if the load bit is zero, then inc is 1, else, inc is 0 */
}
